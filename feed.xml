<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://pirateforfreedom.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://pirateforfreedom.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-05-04T09:43:30+00:00</updated><id>https://pirateforfreedom.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html"></title><link href="https://pirateforfreedom.github.io/blog/2024/2024-05-04-local-llm/" rel="alternate" type="text/html" title=""/><published>2024-05-04T09:43:30+00:00</published><updated>2024-05-04T09:43:30+00:00</updated><id>https://pirateforfreedom.github.io/blog/2024/2024-05-04-local-llm</id><content type="html" xml:base="https://pirateforfreedom.github.io/blog/2024/2024-05-04-local-llm/"><![CDATA[<blockquote> <p>üìò Need help?</p> <p>Visit our <a href="https://discord.gg/9GEQrxmVyE">Discord server</a> and post in the #support channel. Make sure to check the <a href="local_llm_faq">local LLM troubleshooting page</a> to see common issues before raising a new issue or posting on Discord.</p> </blockquote> <blockquote> <p>üìò Using Windows?</p> <p>If you‚Äôre using Windows and are trying to get MemGPT with local LLMs setup, we recommend using Anaconda Shell, or WSL (for more advanced users). See more Windows installation tips <a href="local_llm_faq">here</a>.</p> </blockquote> <blockquote> <p>‚ö†Ô∏è MemGPT + open LLM failure cases</p> <p>When using open LLMs with MemGPT, <strong>the main failure case will be your LLM outputting a string that cannot be understood by MemGPT</strong>. MemGPT uses function calling to manage memory (eg <code class="language-plaintext highlighter-rouge">edit_core_memory(...)</code> and interact with the user (<code class="language-plaintext highlighter-rouge">send_message(...)</code>), so your LLM needs generate outputs that can be parsed into MemGPT function calls. See <a href="local_llm_faq">the local LLM troubleshooting page</a> for more information.</p> </blockquote> <h3 id="installing-dependencies">Installing dependencies</h3> <p>To install dependencies required for running local models, run:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="s1">'pymemgpt[local]'</span>
</code></pre></div></div> <p>If you installed from source (<code class="language-plaintext highlighter-rouge">git clone</code> then <code class="language-plaintext highlighter-rouge">pip install -e .</code>), do:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="nt">-e</span> <span class="s1">'.[local]'</span>
</code></pre></div></div> <p>If you installed from source using Poetry, do:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry <span class="nb">install</span> <span class="nt">-E</span> <span class="nb">local</span>
</code></pre></div></div> <h3 id="quick-overview">Quick overview</h3> <ol> <li>Put your own LLM behind a web server API (e.g. <a href="https://github.com/oobabooga/text-generation-webui#starting-the-web-ui">oobabooga web UI</a>)</li> <li>Run <code class="language-plaintext highlighter-rouge">memgpt configure</code> and when prompted select your backend/endpoint type and endpoint address (a default will be provided but you may have to override it)</li> </ol> <p>For example, if we are running web UI (which defaults to port 5000) on the same computer as MemGPT, running <code class="language-plaintext highlighter-rouge">memgpt configure</code> would look like this:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>? Select LLM inference provider: local
? Select LLM backend (select 'openai' if you have an OpenAI compatible proxy): webui
? Enter default endpoint: http://localhost:5000
? Select default model wrapper (recommended: airoboros-l2-70b-2.1): airoboros-l2-70b-2.1
? Select your model's context window (for Mistral 7B models, this is probably 8k / 8192): 8192
? Select embedding provider: local
? Select default preset: memgpt_chat
? Select default persona: sam_pov
? Select default human: cs_phd
? Select storage backend for archival data: local
Saving config to /home/user/.memgpt/config
</code></pre></div></div> <p>Now when we do <code class="language-plaintext highlighter-rouge">memgpt run</code>, it will use the LLM running on the local web server.</p> <p>If you want to change the local LLM settings of an existing agent, you can pass flags to <code class="language-plaintext highlighter-rouge">memgpt run</code>:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># --model-wrapper will override the wrapper</span>
<span class="c"># --model-endpoint will override the endpoint address</span>
<span class="c"># --model-endpoint-type will override the backend type</span>

<span class="c"># if we were previously using "agent_11" with web UI, and now want to use lmstudio, we can do:</span>
memgpt run <span class="nt">--agent</span> agent_11 <span class="nt">--model-endpoint</span> http://localhost:1234 <span class="nt">--model-endpoint-type</span> lmstudio
</code></pre></div></div> <h3 id="selecting-a-model-wrapper">Selecting a model wrapper</h3> <p>When you use local LLMs, you can specify a <strong>model wrapper</strong> that changes how the LLM input text is formatted before it is passed to your LLM.</p> <p>You can change the wrapper used with the <code class="language-plaintext highlighter-rouge">--model-wrapper</code> flag:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>memgpt run <span class="nt">--model-wrapper</span> airoboros-l2-70b-2.1
</code></pre></div></div> <p>You can see the full selection of model wrappers by running <code class="language-plaintext highlighter-rouge">memgpt configure</code>:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>? Select LLM inference provider: local
? Select LLM backend (select 'openai' if you have an OpenAI compatible proxy): webui
? Enter default endpoint: http://localhost:5000
? Select default model wrapper (recommended: airoboros-l2-70b-2.1): (Use arrow keys)
 ¬ª airoboros-l2-70b-2.1
   airoboros-l2-70b-2.1-grammar
   dolphin-2.1-mistral-7b
   dolphin-2.1-mistral-7b-grammar
   zephyr-7B
   zephyr-7B-grammar
</code></pre></div></div> <p>Note: the wrapper name does <strong>not</strong> have to match the model name. For example, the <code class="language-plaintext highlighter-rouge">dolphin-2.1-mistral-7b</code> model works better with the <code class="language-plaintext highlighter-rouge">airoboros-l2-70b-2.1</code> wrapper than the <code class="language-plaintext highlighter-rouge">dolphin-2.1-mistral-7b</code> wrapper. The model you load inside your LLM backend (e.g. LM Studio) determines what model is actually run, the <code class="language-plaintext highlighter-rouge">--model-wrapper</code> flag just determines how the prompt is formatted before it is passed to the LLM backend.</p> <h3 id="grammars">Grammars</h3> <p>Grammar-based sampling can help improve the performance of MemGPT when using local LLMs. Grammar-based sampling works by restricting the outputs of an LLM to a ‚Äúgrammar‚Äù, for example, the MemGPT JSON function call grammar. Without grammar-based sampling, it is common to encounter JSON-related errors when using local LLMs with MemGPT.</p> <p>To use grammar-based sampling, make sure you‚Äôre using a backend that supports it: webui, llama.cpp, or koboldcpp, then you should specify one of the new wrappers that implements grammars, eg: <code class="language-plaintext highlighter-rouge">airoboros-l2-70b-2.1-grammar</code>.</p> <p>Note that even though grammar-based sampling can reduce the mistakes your LLM makes, it can also make your model inference significantly slower.</p> <h3 id="supported-backends">Supported backends</h3> <p>Currently, MemGPT supports the following backends:</p> <ul> <li><a href="webui">oobabooga web UI</a> (Mac, Windows, Linux) (‚úîÔ∏è supports grammars)</li> <li><a href="lmstudio">LM Studio</a> (Mac, Windows) (‚ùå does not support grammars)</li> <li><a href="koboldcpp">koboldcpp</a> (Mac, Windows, Linux) (‚úîÔ∏è supports grammars)</li> <li><a href="llamacpp">llama.cpp</a> (Mac, Windows, Linux) (‚úîÔ∏è supports grammars)</li> <li><a href="vllm">vllm</a> (Mac, Windows, Linux) (‚ùå does not support grammars)</li> </ul> <p>If you would like us to support a new backend, feel free to open an issue or pull request on <a href="https://github.com/cpacker/MemGPT">the MemGPT GitHub page</a>!</p> <h3 id="which-model-should-i-use">Which model should I use?</h3> <blockquote> <p>üìò Recommended LLMs / models</p> <p>To see a list of recommended LLMs to use with MemGPT, visit our <a href="https://discord.gg/9GEQrxmVyE">Discord server</a> and check the #model-chat channel.</p> </blockquote> <p>If you are experimenting with MemGPT and local LLMs for the first time, we recommend you try the Dolphin Mistral finetune (e.g. <a href="https://huggingface.co/ehartford/dolphin-2.2.1-mistral-7b">ehartford/dolphin-2.2.1-mistral-7b</a> or a quantized variant such as <a href="https://huggingface.co/TheBloke/dolphin-2.2.1-mistral-7B-GGUF">dolphin-2.2.1-mistral-7b.Q6_K.gguf</a>), and use the default <code class="language-plaintext highlighter-rouge">airoboros</code> wrapper.</p> <p>Generating MemGPT-compatible outputs is a harder task for an LLM than regular text output. For this reason <strong>we strongly advise users to NOT use models below Q5 quantization</strong> - as the model gets worse, the number of errors you will encounter while using MemGPT will dramatically increase (MemGPT will not send messages properly, edit memory properly, etc.).</p>]]></content><author><name></name></author></entry><entry><title type="html">First post announcement</title><link href="https://pirateforfreedom.github.io/blog/2023/first-post-announcement/" rel="alternate" type="text/html" title="First post announcement"/><published>2023-09-16T21:32:00+00:00</published><updated>2023-09-16T21:32:00+00:00</updated><id>https://pirateforfreedom.github.io/blog/2023/first-post-announcement</id><content type="html" xml:base="https://pirateforfreedom.github.io/blog/2023/first-post-announcement/"><![CDATA[<p>My personal webpage is officially launched! ‚ú® üòÑ</p>]]></content><author><name></name></author><category term="Original"/><category term="Personal"/><summary type="html"><![CDATA[My personal webpage is officially launched! ‚ú® üòÑ]]></summary></entry></feed>